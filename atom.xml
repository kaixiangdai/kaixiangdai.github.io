<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kaixiangdai.github.io</id>
    <title>凩沐影的博客</title>
    <updated>2022-08-10T02:21:00.921Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kaixiangdai.github.io"/>
    <link rel="self" href="https://kaixiangdai.github.io/atom.xml"/>
    <subtitle>日光照到的一切地方都有阴影</subtitle>
    <logo>https://kaixiangdai.github.io/images/avatar.png</logo>
    <icon>https://kaixiangdai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 凩沐影的博客</rights>
    <entry>
        <title type="html"><![CDATA[antd+vue3]]></title>
        <id>https://kaixiangdai.github.io/post/elementvue3/</id>
        <link href="https://kaixiangdai.github.io/post/elementvue3/">
        </link>
        <updated>2022-05-01T11:01:33.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="antd">Antd</h3>
<p>常用的时候,请访问官网 https://www.antdv.com/components/overview-cn,<br>
在使用组件库的时候,有时候会发现就是无法快速上手,那就需要,自己独立的看文档,多熟悉里面常用的APi</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[React学习]]></title>
        <id>https://kaixiangdai.github.io/post/react-xue-xi/</id>
        <link href="https://kaixiangdai.github.io/post/react-xue-xi/">
        </link>
        <updated>2022-04-14T06:27:29.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><strong>React 特点</strong></p>
</blockquote>
<ul>
<li>优点<br>
1.React 速度快（虚拟 DOM）<br>
2.跨浏览器兼容<br>
3.组件化<br>
4.单向数据流</li>
<li>缺点<br>
React 本身只是一个 V（视图层框架）而已，所以如果是大型项目想要一套完整的框架的话，也许还需要引入 redux 和 routing 相关的东西。</li>
</ul>
<blockquote>
<p><strong>React 高效的原因</strong></p>
</blockquote>
<ul>
<li>它并不直接对 DOM 进行操作，它引入了一个虚拟 DOM 的概念，安插在 JavaScript 逻辑和实际的 DOM 之间，这一概念提高了 WEB 性能，</li>
</ul>
<blockquote>
<p><strong>JSX 语法规则</strong></p>
</blockquote>
<ol>
<li>
<p>定义虚拟 DOM时，不要写引号。</p>
</li>
<li>
<p>标签中混入 JS 表达式时要用-</p>
</li>
<li>
<p>样式的类名指定不要用 class 要用 c1assName.</p>
</li>
<li>
<p>内联样式，要用 sty1e=iikey : value}}的形式去写。</p>
</li>
<li>
<p>只有一个根标签</p>
</li>
<li>
<p>标签必须团合</p>
</li>
<li>
<p>标签首字母</p>
<p>(1).若小写字母开头，则将改标签转为 htm1 中同名元素，若 html 中无该标签对应的同名元素，则报错。</p>
<p>(2).若大写字母开头，react 就去渲染对应的组件，若组件没有定义，则报错</p>
</li>
</ol>
<pre><code class="language-html">&lt;body&gt;
    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;
    &lt;!-- 容器 --&gt;
    &lt;script type=&quot;text/babel&quot;&gt;
        const myId = 'IDd'
        const myData = 'MYData'
        const VDOM = (
            &lt;div&gt;
                &lt;h2 className=&quot;title&quot; id={myId.toLowerCase()}&gt; 
                    &lt;span style={{ color: 'red', fontSize: '99px' }}&gt; {myData.toUpperCase()}&lt;/span&gt; 
                &lt;/h2&gt;
            &lt;/div&gt;
        )
        ReactDOM.render(
            VDOM
            ,
            document.getElementById('example')
        );
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>
<blockquote>
<p>JSX小练习</p>
</blockquote>
<pre><code class="language-jsx">&lt;body&gt;
    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;
    &lt;!-- 容器 --&gt;
    &lt;script type=&quot;text/babel&quot;&gt;
        const data=[&quot;数组一&quot;,&quot;数组二&quot;,&quot;数组三&quot;]
        const VDOM = (
            &lt;div&gt;
            &lt;h1&gt; 前端js框架列表&lt;/h1&gt;
              &lt;ul&gt;
                {
                    data.map((item,index)=&gt;{
                      return  &lt;li key={index}&gt;{item} &lt;/li&gt;
                    })
                }
              &lt;/ul&gt;
            &lt;/div&gt;
        )
        ReactDOM.render(
            VDOM, document.getElementById('example')
        );
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>
<blockquote>
<h1 id="组件与模块"><strong>组件与模块</strong></h1>
</blockquote>
<p>函数式<br>
函数必须有返回值</p>
<pre><code>    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;
    &lt;script type=&quot;text/babel&quot;&gt;
        function Demo() { return &lt;h2&gt; 我是函数式编程&lt;/h2&gt;;}
        //此处的d必须大写,在下面的render里面必须闭合
        ReactDOM.render(&lt;Demo /&gt;, document.getElementById(&quot;example&quot;));
    &lt;/script&gt;
</code></pre>
<details>
<summary>展开查看</summary>
<pre><code>
看啥呢,没写
</code></pre>
</details>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue]]></title>
        <id>https://kaixiangdai.github.io/post/ju-zi/</id>
        <link href="https://kaixiangdai.github.io/post/ju-zi/">
        </link>
        <updated>2022-04-06T07:35:18.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li><a href="#%E4%B8%80-vue%E6%98%AF%E4%BB%80%E4%B9%88">一、Vue是什么</a></li>
<li><a href="#%E4%BA%8C-vue%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7">二、Vue核心特性</a>
<ul>
<li><a href="#1-%E6%95%B0%E6%8D%AE%E9%A9%B1%E5%8A%A8mvvm">1. 数据驱动（MVVM)</a></li>
<li><a href="#2-%E7%BB%84%E4%BB%B6%E5%8C%96">2. 组件化</a></li>
<li><a href="#3%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F">3.指令系统</a></li>
</ul>
</li>
<li><a href="#%E4%B8%89-vue%E5%92%8Cjquery%E5%BC%80%E5%8F%91%E7%9A%84%E5%8C%BA%E5%88%AB">三、Vue和Jquery开发的区别</a></li>
<li><a href="#%E5%9B%9B-vue%E5%92%8Creact%E5%AF%B9%E6%AF%94">四、Vue和React对比</a></li>
</ul>
<h2 id="一-vue是什么">一、Vue是什么</h2>
<p>Vue.js（/vjuː/，或简称为Vue）是一个用于创建用户界面的开源JavaScript框架，也是一个创建单页应用的Web应用框架。</p>
<blockquote>
<p><strong>vue旨在更好地组织与简化Web开发。Vue所关注的核心是MVC模式中的视图层，同时，它也能方便地获取数据更新，并通过组件内部特定的方法实现视图与模型的交互。<br>
vue框架最早发布于2014年2月</strong></p>
</blockquote>
<h2 id="二-vue核心特性">二、Vue核心特性</h2>
<h4 id="1-数据驱动mvvm">1. 数据驱动（MVVM)</h4>
<ol>
<li>Model：模型层，负责处理业务逻辑以及和服务器端进行交互</li>
<li>View：视图层：负责将数据模型转化为UI展示出来，可以简单的理解为HTML页面</li>
<li>ViewModel：视图模型层，用来连接Model和View，是Model和View之间的通信桥梁</li>
</ol>
<h4 id="2-组件化">2. 组件化</h4>
<ol>
<li>（什么是组件化）就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在Vue中每一个.vue文件都可以视为一个组件</li>
<li>组件化的优势</li>
</ol>
<ul>
<li><strong>降低整个系统的耦合度</strong>，在保持接口不变的情况下，我们可以替换不同的组件快速完成需求，例如输入框，可以替换为日历、时间、范围等组件作具体的实现</li>
<li><strong>调试方便</strong>，由于整个系统是通过组件组合起来的，在出现问题的时候，可以用排除法直接移除组件，或者根据报错的组件快速定位问题，之所以能够快速定位，是因为每个组件之间低耦合，职责单一，所以逻辑会比分析整个系统要简单</li>
<li><strong>提高可维护性</strong>，由于每个组件的职责单一，并且组件在系统中是被复用的，所以对代码进行优化可获得系统的整体升级</li>
</ul>
<h4 id="3指令系统">3.指令系统</h4>
<p>解释：指令 (Directives) 是带有 v- 前缀的特殊属性作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p>
<p><strong>常用的指令</strong></p>
<ul>
<li>条件渲染指令 v-if</li>
<li>列表渲染指令v-for</li>
<li>属性绑定指令v-bind</li>
<li>事件绑定指令v-on</li>
<li>双向数据绑定指令v-model
<ul>
<li><code>v-model</code>是 ”视图抛发改变数据的特定事件去驱动数据更改“ ，更像是双向绑定的一种“语法糖”，实际最终的数据还是由父组件传递给子组件的。</li>
</ul>
</li>
</ul>
<h2 id="三-vue和jquery开发的区别">三、Vue和Jquery开发的区别</h2>
<ol>
<li>Vue所有的界面事件，都是只去操作数据的，Jquery操作DOM</li>
<li>Vue所有界面的变动，都是根据数据自动绑定出来的，Jquery操作DOM</li>
</ol>
<h2 id="四-vue和react对比">四、Vue和React对比</h2>
<p><strong>相同点</strong></p>
<ul>
<li>都有组件化思想</li>
<li>都支持服务器端渲染</li>
<li>都有Virtual DOM（虚拟dom）</li>
<li>数据驱动视图</li>
<li>都有支持native的方案：
<ul>
<li>Vue的<a href="https://doc.weex.io/zh/guide/use-vue-in-weex.html">weex</a></li>
<li>React的<a href="https://reactnative.dev/docs/getting-started">React native</a></li>
</ul>
</li>
<li>都有自己的构建工具：Vue的vue-cli、React的Create React App</li>
</ul>
<p><strong>不同点</strong></p>
<ul>
<li>数据变化的实现原理不同。react使用的是不可变数据，而Vue使用的是可变的数据</li>
<li>组件化通信的不同。react中我们通过使用回调函数来进行通信的，而Vue中子组件向父组件传递消息有两种方式：事件和回调函数</li>
<li>diff算法不同。react主要使用diff队列保存需要更新哪些DOM，得到patch树，再统一操作批量更新DOM。Vue 使用双向指针，边对比，边更新DOM</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[若再许我少年时,一两黄金一两风]]></title>
        <id>https://kaixiangdai.github.io/post/ruo-zai-xu-wo-shao-nian-shi-yi-liang-huang-jin-yi-liang-feng/</id>
        <link href="https://kaixiangdai.github.io/post/ruo-zai-xu-wo-shao-nian-shi-yi-liang-huang-jin-yi-liang-feng/">
        </link>
        <updated>2022-04-05T16:34:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="小说里的经典语句">小说里的经典语句</h2>
<p>1、爱情不能被占有，只能被接受。</p>
<p>2、别后相思空一水，重来回首已三生。</p>
<p>3、不再孤独，只有曾经真正孤独过的人才知道这是种多么微妙的感觉</p>
<p>4、隔了百年的光阴，万里的迢梯，浮世肮脏，人心险诈，割裂了生和死。到哪里，再去寻找。纯白如羽的华衣，还有那张莲花般的素颜。</p>
<p>5、工于心计的人，往往也会很幼稚，狡猾和成熟根本就是两回事</p>
<p>6、孤单的你，孤单的我，孤单的灵魂，流离失所。</p>
<p>7、即使是隔得最近的两颗星辰，他们之间也隔着毕生也无法到达的距离。</p>
<p>8、每个人都有自己的命运，大多数人都在受着命运的摆布，只有很少人能反抗改变自己的命运，我只恨自己为什么不是这种人。</p>
<p>9、美若没有几分遗憾，如何能有那千般的滋味？——刘墉《昙花》</p>
<p>10、那是不同高度上的两片云---你在底下看上去它们重合了，事实上却永远不会相遇。</p>
<p>11、女人是水总有干枯的一天，男人是山总有光秃的一天。所以，山水相伴才能成一个循环——</p>
<p>12、人之所以不幸福，也可能是被自己耽误的。《分手快乐》</p>
<p>13、日光照到的一切地方都有阴影。</p>
<p>14、失败也有失败的乐趣，至少成功的人永远享受不到。</p>
<p>15、说不出是喜悦，还是苦涩。头也不回，大步迈向未来。说好N年后，一定会再相聚。我们始终面对勇敢坚持。</p>
<p>16、我的梦永远不会醒，因为我从没有做过梦。</p>
<p>17、我也很想他，我们都一样，在他的身上。想找到翅膀，(www.lz13.cn)只是那时的他，是因为你他开始飞翔。</p>
<p>18、我怎么能因为蝎子有蜇人的天性就放弃我爱的天性呢？《蝎子与爱》</p>
<p>19、一个人自信太强也同样容易发生错误，有时甚至比没有自信更坏</p>
<p>20、一切开始于结束之后，生与死重叠，终点与起点重叠。一切终归湮灭，如镜像倒影……</p>
<p>21、有时一个人活着并不是为了享受欢乐，而是为了忍受痛苦，因为活着只是一种责任，谁也不能逃避。</p>
<p>22、原来，即便是生命里最深的爱恋，也终究抵不过时间。</p>
<p>23、原来这一场千里的跋涉，只不过是来做最后一次甚至无法相见的告别。</p>
<p>24、在这社会里爱情是因为伤痛绝望而美丽像罗蜜欧梁山泊。</p>
<p>25、一个成熟的人往往发觉可以责怪的人越来越少，人人都有他的难处。——《我们不是天使》</p>
<p>26、一个人呢一生中他可能做过很多好事他都会忘记，但等他到老的时候他真正记起来的是他做过的坏事。</p>
<p>27、赢了你嫁给我，输了我娶你。</p>
<p>28、有能力的人影响别人，没能力的一群受人影响。——《喜宝》</p>
<p>29、雨滴从玻璃上滑落的样子，原来是有迹可循的。</p>
<p>30、原谅我凌乱的文字，原谅我破碎的时光。</p>
<p>31、愿上帝赐我平静的心，让我接受我无法改变的事情。愿上帝赐我勇气，让我改变我能改变的事情。愿上帝赐我智慧，让我能够分清这两者。</p>
<p>32、在人生和世界的激流中，他必然会像初冬从树上飘落下来的最后一片枯叶，在西风残照中孤零零地漫无目的地飘舞。</p>
<p>33、在时间里面，我们什么也不能留下。包括痛苦，快乐，和生命。</p>
<p>34、在这世间，有些路是非要一个人去面对，单独一个人去跋涉的。</p>
<p>35、早起的鸟儿有虫吃，早起的虫儿被鸟吃！</p>
<p>36、曾在阳光下幻想着云游四海，浪迹天涯。</p>
<p>37、这是一个高度竞争的社会，没有资格走的人最好不要走，否则要回头这个位置已经被人占去，再也没有空隙，闲时闹意气，一点用处也没有。——《曾经深爱过》</p>
<p>38、真正的才华如火焰般难以收藏，总会燎原。——《曾经深爱过》</p>
<p>39、总是在老歌里，我才会充分意识到自己的温情。流金岁月，配上简单的老歌，也便配上了真实的悲欢。</p>
<p>40、最佳的报复不是仇恨，而是打心底发出的冷淡，干嘛花力气去恨一个不相干的人。——《我的前半生》</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typescript]]></title>
        <id>https://kaixiangdai.github.io/post/ce-shi-yi-xia/</id>
        <link href="https://kaixiangdai.github.io/post/ce-shi-yi-xia/">
        </link>
        <updated>2022-04-05T12:14:49.000Z</updated>
        <content type="html"><![CDATA[<h3 id="目前仅仅知道基本个基本使用未进行太深入的研究和使用">目前仅仅知道基本个基本使用,未进行太深入的研究,和使用</h3>
<h2 id="例如经常使用interface进行数据的定义">例如经常使用,Interface进行数据的定义</h2>
]]></content>
    </entry>
</feed>